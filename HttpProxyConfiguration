package com.scb.channels.research.config;

import org.apache.commons.lang.StringUtils;
import org.apache.http.HttpHost;
import org.apache.http.client.HttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.DefaultProxyRoutePlanner;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import java.util.Arrays;
import java.util.Map;
import java.util.stream.Collectors;

import static com.scb.channels.research.utils.RpApiConstants.HOST_INDEX;
import static com.scb.channels.research.utils.RpApiConstants.PORT_INDEX;
import static java.util.function.Function.identity;

@Configuration
public class HttpProxyConfiguration {

    @Value("${proxy.servers}")
    private String proxyServer;

    @Bean
    public RestProxyTemplate restProxyTemplate() {
        RestTemplate restTemplate = new RestTemplate();
        HttpClient httpClient = HttpClients.custom().setRoutePlanner(dynamicProxyRoutePlanner()).build();
        restTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory(httpClient));
        return new RestProxyTemplate(restTemplate);
    }

    private Map<String, DefaultProxyRoutePlanner> proxyRoutePlannerMap() {
        return Arrays.stream(StringUtils.split(proxyServer, ','))
                .collect(Collectors.toMap(identity(), this::createDefaultProxyRoutPlanner));

    }

    private HttpHost createHttpHost(String host, int port) {
        return new HttpHost(host, port);
    }

    private DynamicProxyRoutePlanner dynamicProxyRoutePlanner() {
        return new DynamicProxyRoutePlanner(proxyRoutePlannerMap());
    }

    private DefaultProxyRoutePlanner createDefaultProxyRoutPlanner(String proxy) {
        return new DefaultProxyRoutePlanner(
                createHttpHost(StringUtils.split(proxy, ':')[HOST_INDEX], Integer.parseInt(StringUtils.split(proxy, ':')[PORT_INDEX]))
        );
    }
}
